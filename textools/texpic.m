function texpic(x,y,file,yscale,maxlen)
%TEXPIC  Creates an eepic picture.
%   TEXPIC(X,Y,FILE[,YSCALE[,MAXLEN]]) creates a tex-file for use with LaTeX.
%   X and Y are vectors to plot. If X contains any elements of NaNs,
%   it will "lift the pen" and start a new line to draw (using \path).
%   YSCALE is the scaling factor for the y-axis of the figure.
%   If YSCALE = 2, then the data points along the y-axis will be twice
%   as long as it had been in natural propotions.
%   MAXLEN is the maximum width of the picture in cm (default: 10).
%   TEXPIC(H,[],FILE[,YSCALE[,MAXLEN]]), where H is a figure handle.
%   The main tex-file could look like this:
%
%     \documentclass{article}
%     \usepackage{graphics}    %for rotation of textboxes (disabled for now).
%     \usepackage{epic}
%     \usepackage{eepic}
%     \begin{document}
%       \begin{figure}
%         \centering
%         \input{test.eepic}
%         \caption{A test of \TeX pic v. 1.1.}
%       \end{figure}
%     \end{document}
%
%   See also MPAINT, IMPXFIG, TEXTAB, TEXMAT.

% Copyright (c) 2001-08-14, B. Rasmus Anthin.
% Revision: 2001-09-16, 2002-08-20, 2002-10-28, 2002-11-22.

error(nargchk(3,5,nargin))
if ~any(file=='.')
   file=[file '.eepic'];
end
if nargin<5 | isempty(maxlen)
   maxlen=10;  %cm
end
if nargin<4 | isempty(yscale)
   yscale=1;
end
fp=fopen(file,'w');
fprintf(fp,'%%This file was generated by TeXpic v. 1.1 for MATLAB.\n');
fprintf(fp,'%%Copyright (c) 2001-08-14, B. Rasmus Anthin.\n');
fprintf(fp,'%%Revision: 2001-09-16, 2002-08-20, 2002-10-28.\n\n');
if ~isempty(y)
   fprintf(fp,['\\setlength{\\unitlength}{' num2strf(maxlen/range(x)) 'cm}\n']);
   fprintf(fp,['\\begin{picture}(' num2strf(range(x)) ',' num2strf(range(y)*yscale) ')']);
   fprintf(fp,'\n\\path');
   lwc=.5;
   for i=1:length(x)
      if ~isnan(x(i))
         fprintf(fp,['(' num2strf(x(i)-min(x)) ',' num2strf((y(i)-min(y))*yscale) ')']);
         if ~mod(i,10),fprintf(fp,'\n     ');end
      else
         fprintf(fp,'\n\\path');
      end
   end
else
   if strcmp(get(x,'user'),'xfig')
      flipfig(x)
      disp('Flips y-axis...')
   end
   hwb=waitbar(0,'Processing objects...');
   h=get(x,'child');
   xlim=get(h(1),'xlim');
   ylim=get(h(1),'ylim');
   h=get(h,'child');
   unitlen=maxlen/range(xlim);
   xlen=range(xlim);
   ylen=range(ylim)*yscale;
   fprintf(fp,['\\setlength{\\unitlength}{' num2strf(unitlen) 'cm}\n']);
   fprintf(fp,['\\begin{picture}(' num2strf(xlen) ',' num2strf(ylen) ')']);
   lwc=.5;
   for i=length(h):-1:1
      waitbar(1-i/length(h))
      if strcmp(get(h(i),'visible'),'on')
         usr=get(h(i),'user');
         switch get(h(i),'type')
         case{'line'}
            switch get(h(i),'linestyle')
            case {':'}
               method=['\n\\dottedline{' num2str(1/15) '}'];
            case {'--'}
               method=['\n\\dashline{' num2str(1/7) '}'];
            otherwise
               method='\n\\path';
            end
            x=get(h(i),'xdata');
            y=get(h(i),'ydata');
            lw=get(h(i),'linewidth');
            if length(x)>1
               if lw~=lwc
                  if lw<=.5
                     fprintf(fp,'\n\\thinlines');
                  elseif lw>.5 & lw<=2
                     fprintf(fp,'\n\\thicklines');
                  elseif lw>2
                     fprintf(fp,'\n\\Thicklines');
                  end
               end
               lwc=lw;
               if iscell(usr) & length(usr)==3 & strcmp(usr{1},'circle')
                  fprintf(fp,['\n\\put(' num2strf(usr{3}(1)-min(xlim)) ',' num2strf((usr{3}(2)-min(ylim))*yscale) '){'...
                        '\\circle{' num2strf(2*usr{2}) '}}']);
               elseif iscell(usr) & length(usr)==4 & strcmp(usr{1},'ellipse')
                  fprintf(fp,['\n\\put(' num2strf(usr{4}(1)-min(xlim)) ',' num2strf((usr{4}(2)-min(ylim))*yscale) '){'...
                        '\\ellipse{' num2strf(2*usr{2}) '}{' num2strf(2*usr{3}) '}}']);
               else
                  fprintf(fp,method);
                  for j=1:length(x)
                     if ~isnan(x(j))
                        xx=max(min(x(j),max(xlim)),min(xlim))-min(xlim);
                        yy=max(min(y(j),max(ylim)),min(ylim))-min(ylim);
                        fprintf(fp,['(' num2strf(xx) ',' num2strf(yy*yscale) ')']);
                        if ~mod(j,10),fprintf(fp,'\n     ');end
                     else
                        fprintf(fp,method);
                     end
                  end
               end
            else
               fprintf(fp,['\n\\put(' num2strf(x-min(xlim)) ',' num2strf((y-min(ylim))*yscale) '){'...
                     '\\circle*{' num2str(1/10) '}}']);
            end
         case {'patch'}
            x=get(h(i),'xdata');
            y=get(h(i),'ydata');
            lw=get(h(i),'linewidth');
            c=get(h(i),'facecolor');
            if all(~c)
               fprintf(fp,'\n\\blacken');
            elseif all(c==1)
               fprintf(fp,'\n\\whiten');
            else
               fprintf(fp,'\n\\shade');
            end
            if lw~=lwc
               if lw<=.5
                  fprintf(fp,'\\thinlines');
               elseif lw>.5 & lw<=2
                  fprintf(fp,'\\thicklines');
               elseif lw>2
                  fprintf(fp,'\\Thicklines');
               end
            end
            lwc=lw;
            if iscell(usr) & length(usr)==3 & strcmp(usr{1},'fcircle')
               fprintf(fp,['\\put(' num2strf(usr{3}(1)-min(xlim)) ',' num2strf((usr{3}(2)-min(ylim))*yscale) '){'...
                     '\\circle{' num2strf(2*usr{2}) '}}']);
            elseif iscell(usr) & length(usr)==4 & strcmp(usr{1},'fellipse')
               fprintf(fp,['\\put(' num2strf(usr{4}(1)-min(xlim)) ',' num2strf((usr{4}(2)-min(ylim))*yscale) '){'...
                     '\\ellipse{' num2strf(2*usr{2}) '}{' num2strf(2*usr{3}) '}}']);
            else
               fprintf(fp,'\\path');
               for j=1:length(x)
                  xx=max(min(x(j),max(xlim)),min(xlim))-min(xlim);
                  yy=max(min(y(j),max(ylim)),min(ylim))-min(ylim);
                  fprintf(fp,['(' num2strf(xx) ',' num2strf(yy*yscale) ')']);
                  if ~mod(j,10),fprintf(fp,'\n     ');end
               end
            end
         case {'text'}
            ext=get(h(i),'extent');
            pos=ext(1:2)-[min(xlim),min(ylim)]+ext(3:4)/2;
            siz=get(h(i),'fontsize');
            if siz<7
               fs='\\tiny ';
            elseif 7<=siz & siz<8.5
               fs='\\scriptsize ';
            elseif 8.5<=siz & siz<9.5
               fs='\\footnotesize ';
            elseif 9.5<=siz & siz<10.5
               fs='\\small ';
            elseif 10.5<=siz & siz<11.5
               fs='';
            elseif 11.5<=siz & siz<13
               fs='\\large ';
            elseif 13<=siz & siz<15.5
               fs='\\Large ';
            elseif 15.5<=siz & siz<18.5
               fs='\\LARGE ';
            elseif 18.5<=siz
               fs='\\huge ';
            end
            type='';
            if strcmp(lower(get(h(i),'fontname')),'courier')
               type='\\mathtt';
            end
            if any(strcmp(get(h(i),'fontweight'),{'bold','demi'}))
               type=[type '\\mathbf'];
            end
            if any(strcmp(get(h(i),'fontangle'),{'italic','oblique'}))
               type=[type '\\mathit'];
            end
            if ~isempty(type)
               type=[type ' '];
            end
            string=get(h(i),'string');
            string=strrep(string,'\','\\');
            string=strrep(string,char(176),'^\\circ');
            strang=get(h(i),'rotation');
            fprintf(fp,['\n\\put(' num2strf(pos(1)) ',' num2strf(pos(2)*yscale)...      %to be improved...
                  '){\\makebox(0,0){' fs '$' type string '$}}']);
            %      '){\\rotatebox{' num2strf(strang) '}{\\makebox(' num2strf(0) ',' num2strf(ylen/50)...
            %      '){' fs '$' type string '$}}}']);      
         end
      end
   end
end
if lwc~=.5
   fprintf(fp,'\n\\thinlines');
end
fprintf(fp,'\n\\end{picture}');
fclose(fp);
close(hwb)

function y=range(x)
y=max(x)-min(x);